{"ast":null,"code":"/*!\n  * CoreUI v2.1.12 (https://coreui.io)\n  * Copyright 2019 Łukasz Holeczek\n  * Licensed under MIT (https://coreui.io)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.utilities = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.12): classes.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  var sidebarCssClasses = ['sidebar-show', 'sidebar-sm-show', 'sidebar-md-show', 'sidebar-lg-show', 'sidebar-xl-show'];\n  var asideMenuCssClasses = ['aside-menu-show', 'aside-menu-sm-show', 'aside-menu-md-show', 'aside-menu-lg-show', 'aside-menu-xl-show'];\n  var validBreakpoints = ['sm', 'md', 'lg', 'xl'];\n\n  function checkBreakpoint(breakpoint, list) {\n    return list.indexOf(breakpoint) > -1;\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  var O = 'object';\n\n  var check = function check(it) {\n    return it && it.Math == Math && it;\n  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\n\n  var global_1 = // eslint-disable-next-line no-undef\n  check(typeof globalThis == O && globalThis) || check(typeof window == O && window) || check(typeof self == O && self) || check(typeof commonjsGlobal == O && commonjsGlobal) || // eslint-disable-next-line no-new-func\n  Function('return this')();\n\n  var fails = function fails(exec) {\n    try {\n      return !!exec();\n    } catch (error) {\n      return true;\n    }\n  }; // Thank's IE8 for his funny defineProperty\n\n\n  var descriptors = !fails(function () {\n    return Object.defineProperty({}, 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;\n  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug\n\n  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({\n    1: 2\n  }, 1);\n  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n    var descriptor = getOwnPropertyDescriptor(this, V);\n    return !!descriptor && descriptor.enumerable;\n  } : nativePropertyIsEnumerable;\n  var objectPropertyIsEnumerable = {\n    f: f\n  };\n\n  var createPropertyDescriptor = function createPropertyDescriptor(bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var toString = {}.toString;\n\n  var classofRaw = function classofRaw(it) {\n    return toString.call(it).slice(8, -1);\n  }; // fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n\n  var split = ''.split;\n  var indexedObject = fails(function () {\n    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n    // eslint-disable-next-line no-prototype-builtins\n    return !Object('z').propertyIsEnumerable(0);\n  }) ? function (it) {\n    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);\n  } : Object; // `RequireObjectCoercible` abstract operation\n  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible\n\n  var requireObjectCoercible = function requireObjectCoercible(it) {\n    if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n    return it;\n  }; // toObject with fallback for non-array-like ES3 strings\n\n\n  var toIndexedObject = function toIndexedObject(it) {\n    return indexedObject(requireObjectCoercible(it));\n  };\n\n  var isObject = function isObject(it) {\n    return typeof it === 'object' ? it !== null : typeof it === 'function';\n  }; // 7.1.1 ToPrimitive(input [, PreferredType])\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n\n\n  var toPrimitive = function toPrimitive(it, S) {\n    if (!isObject(it)) return it;\n    var fn, val;\n    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  var has = function has(it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var document$1 = global_1.document; // typeof document.createElement is 'object' in old IE\n\n  var exist = isObject(document$1) && isObject(document$1.createElement);\n\n  var documentCreateElement = function documentCreateElement(it) {\n    return exist ? document$1.createElement(it) : {};\n  }; // Thank's IE8 for his funny defineProperty\n\n\n  var ie8DomDefine = !descriptors && !fails(function () {\n    return Object.defineProperty(documentCreateElement('div'), 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n    O = toIndexedObject(O);\n    P = toPrimitive(P, true);\n    if (ie8DomDefine) try {\n      return nativeGetOwnPropertyDescriptor(O, P);\n    } catch (error) {\n      /* empty */\n    }\n    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);\n  };\n  var objectGetOwnPropertyDescriptor = {\n    f: f$1\n  };\n\n  var anObject = function anObject(it) {\n    if (!isObject(it)) {\n      throw TypeError(String(it) + ' is not an object');\n    }\n\n    return it;\n  };\n\n  var nativeDefineProperty = Object.defineProperty;\n  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n    anObject(O);\n    P = toPrimitive(P, true);\n    anObject(Attributes);\n    if (ie8DomDefine) try {\n      return nativeDefineProperty(O, P, Attributes);\n    } catch (error) {\n      /* empty */\n    }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n  var objectDefineProperty = {\n    f: f$2\n  };\n  var hide = descriptors ? function (object, key, value) {\n    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var setGlobal = function setGlobal(key, value) {\n    try {\n      hide(global_1, key, value);\n    } catch (error) {\n      global_1[key] = value;\n    }\n\n    return value;\n  };\n\n  var shared = createCommonjsModule(function (module) {\n    var SHARED = '__core-js_shared__';\n    var store = global_1[SHARED] || setGlobal(SHARED, {});\n    (module.exports = function (key, value) {\n      return store[key] || (store[key] = value !== undefined ? value : {});\n    })('versions', []).push({\n      version: '3.1.3',\n      mode: 'global',\n      copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n    });\n  });\n  var functionToString = shared('native-function-to-string', Function.toString);\n  var WeakMap = global_1.WeakMap;\n  var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(functionToString.call(WeakMap));\n  var id = 0;\n  var postfix = Math.random();\n\n  var uid = function uid(key) {\n    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));\n  };\n\n  var keys = shared('keys');\n\n  var sharedKey = function sharedKey(key) {\n    return keys[key] || (keys[key] = uid(key));\n  };\n\n  var hiddenKeys = {};\n  var WeakMap$1 = global_1.WeakMap;\n  var set, get, has$1;\n\n  var enforce = function enforce(it) {\n    return has$1(it) ? get(it) : set(it, {});\n  };\n\n  var getterFor = function getterFor(TYPE) {\n    return function (it) {\n      var state;\n\n      if (!isObject(it) || (state = get(it)).type !== TYPE) {\n        throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n      }\n\n      return state;\n    };\n  };\n\n  if (nativeWeakMap) {\n    var store = new WeakMap$1();\n    var wmget = store.get;\n    var wmhas = store.has;\n    var wmset = store.set;\n\n    set = function set(it, metadata) {\n      wmset.call(store, it, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return wmget.call(store, it) || {};\n    };\n\n    has$1 = function has$1(it) {\n      return wmhas.call(store, it);\n    };\n  } else {\n    var STATE = sharedKey('state');\n    hiddenKeys[STATE] = true;\n\n    set = function set(it, metadata) {\n      hide(it, STATE, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return has(it, STATE) ? it[STATE] : {};\n    };\n\n    has$1 = function has$1(it) {\n      return has(it, STATE);\n    };\n  }\n\n  var internalState = {\n    set: set,\n    get: get,\n    has: has$1,\n    enforce: enforce,\n    getterFor: getterFor\n  };\n  var redefine = createCommonjsModule(function (module) {\n    var getInternalState = internalState.get;\n    var enforceInternalState = internalState.enforce;\n    var TEMPLATE = String(functionToString).split('toString');\n    shared('inspectSource', function (it) {\n      return functionToString.call(it);\n    });\n    (module.exports = function (O, key, value, options) {\n      var unsafe = options ? !!options.unsafe : false;\n      var simple = options ? !!options.enumerable : false;\n      var noTargetGet = options ? !!options.noTargetGet : false;\n\n      if (typeof value == 'function') {\n        if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);\n        enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n      }\n\n      if (O === global_1) {\n        if (simple) O[key] = value;else setGlobal(key, value);\n        return;\n      } else if (!unsafe) {\n        delete O[key];\n      } else if (!noTargetGet && O[key]) {\n        simple = true;\n      }\n\n      if (simple) O[key] = value;else hide(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n    })(Function.prototype, 'toString', function toString() {\n      return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);\n    });\n  });\n  var ceil = Math.ceil;\n  var floor = Math.floor; // `ToInteger` abstract operation\n  // https://tc39.github.io/ecma262/#sec-tointeger\n\n  var toInteger = function toInteger(argument) {\n    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n  };\n\n  var min = Math.min; // `ToLength` abstract operation\n  // https://tc39.github.io/ecma262/#sec-tolength\n\n  var toLength = function toLength(argument) {\n    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min; // Helper for a popular repeating case of the spec:\n  // Let integer be ? ToInteger(index).\n  // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).\n\n  var toAbsoluteIndex = function toAbsoluteIndex(index, length) {\n    var integer = toInteger(index);\n    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\n  }; // `Array.prototype.{ indexOf, includes }` methods implementation\n  // false -> Array#indexOf\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  // true  -> Array#includes\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\n\n  var arrayIncludes = function arrayIncludes(IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = toIndexedObject($this);\n      var length = toLength(O.length);\n      var index = toAbsoluteIndex(fromIndex, length);\n      var value; // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++]; // eslint-disable-next-line no-self-compare\n\n        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\n      } else for (; length > index; index++) {\n        if (IS_INCLUDES || index in O) {\n          if (O[index] === el) return IS_INCLUDES || index || 0;\n        }\n      }\n      return !IS_INCLUDES && -1;\n    };\n  };\n\n  var arrayIndexOf = arrayIncludes(false);\n\n  var objectKeysInternal = function objectKeysInternal(object, names) {\n    var O = toIndexedObject(object);\n    var i = 0;\n    var result = [];\n    var key;\n\n    for (key in O) {\n      !has(hiddenKeys, key) && has(O, key) && result.push(key);\n    } // Don't enum bug & hidden keys\n\n\n    while (names.length > i) {\n      if (has(O, key = names[i++])) {\n        ~arrayIndexOf(result, key) || result.push(key);\n      }\n    }\n\n    return result;\n  }; // IE8- don't enum bug keys\n\n\n  var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf']; // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\n  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');\n\n  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return objectKeysInternal(O, hiddenKeys$1);\n  };\n\n  var objectGetOwnPropertyNames = {\n    f: f$3\n  };\n  var f$4 = Object.getOwnPropertySymbols;\n  var objectGetOwnPropertySymbols = {\n    f: f$4\n  };\n  var Reflect = global_1.Reflect; // all object keys, includes non-enumerable and symbols\n\n  var ownKeys = Reflect && Reflect.ownKeys || function ownKeys(it) {\n    var keys = objectGetOwnPropertyNames.f(anObject(it));\n    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n  };\n\n  var copyConstructorProperties = function copyConstructorProperties(target, source) {\n    var keys = ownKeys(source);\n    var defineProperty = objectDefineProperty.f;\n    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  };\n\n  var replacement = /#|\\.prototype\\./;\n\n  var isForced = function isForced(feature, detection) {\n    var value = data[normalize(feature)];\n    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;\n  };\n\n  var normalize = isForced.normalize = function (string) {\n    return String(string).replace(replacement, '.').toLowerCase();\n  };\n\n  var data = isForced.data = {};\n  var NATIVE = isForced.NATIVE = 'N';\n  var POLYFILL = isForced.POLYFILL = 'P';\n  var isForced_1 = isForced;\n  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\n  /*\n    options.target      - name of the target object\n    options.global      - target is the global object\n    options.stat        - export as static methods of target\n    options.proto       - export as prototype methods of target\n    options.real        - real prototype method for the `pure` version\n    options.forced      - export even if the native feature is available\n    options.bind        - bind methods to the target, required for the `pure` version\n    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n    options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n    options.sham        - add a flag to not completely full polyfills\n    options.enumerable  - export as enumerable property\n    options.noTargetGet - prevent calling a getter on target\n  */\n\n  var _export = function _export(options, source) {\n    var TARGET = options.target;\n    var GLOBAL = options.global;\n    var STATIC = options.stat;\n    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n\n    if (GLOBAL) {\n      target = global_1;\n    } else if (STATIC) {\n      target = global_1[TARGET] || setGlobal(TARGET, {});\n    } else {\n      target = (global_1[TARGET] || {}).prototype;\n    }\n\n    if (target) for (key in source) {\n      sourceProperty = source[key];\n\n      if (options.noTargetGet) {\n        descriptor = getOwnPropertyDescriptor$1(target, key);\n        targetProperty = descriptor && descriptor.value;\n      } else targetProperty = target[key];\n\n      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\n\n      if (!FORCED && targetProperty !== undefined) {\n        if (typeof sourceProperty === typeof targetProperty) continue;\n        copyConstructorProperties(sourceProperty, targetProperty);\n      } // add a flag to not completely full polyfills\n\n\n      if (options.sham || targetProperty && targetProperty.sham) {\n        hide(sourceProperty, 'sham', true);\n      } // extend global\n\n\n      redefine(target, key, sourceProperty, options);\n    }\n  }; // 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n  var objectKeys = Object.keys || function keys(O) {\n    return objectKeysInternal(O, enumBugKeys);\n  }; // `ToObject` abstract operation\n  // https://tc39.github.io/ecma262/#sec-toobject\n\n\n  var toObject = function toObject(argument) {\n    return Object(requireObjectCoercible(argument));\n  };\n\n  var nativeAssign = Object.assign; // 19.1.2.1 Object.assign(target, source, ...)\n  // should work with symbols and should have deterministic property order (V8 bug)\n\n  var objectAssign = !nativeAssign || fails(function () {\n    var A = {};\n    var B = {}; // eslint-disable-next-line no-undef\n\n    var symbol = Symbol();\n    var alphabet = 'abcdefghijklmnopqrst';\n    A[symbol] = 7;\n    alphabet.split('').forEach(function (chr) {\n      B[chr] = chr;\n    });\n    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n  }) ? function assign(target, source) {\n    // eslint-disable-line no-unused-vars\n    var T = toObject(target);\n    var argumentsLength = arguments.length;\n    var index = 1;\n    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n    var propertyIsEnumerable = objectPropertyIsEnumerable.f;\n\n    while (argumentsLength > index) {\n      var S = indexedObject(arguments[index++]);\n      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n      var length = keys.length;\n      var j = 0;\n      var key;\n\n      while (length > j) {\n        key = keys[j++];\n        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n      }\n    }\n\n    return T;\n  } : nativeAssign; // `Object.assign` method\n  // https://tc39.github.io/ecma262/#sec-object.assign\n\n  _export({\n    target: 'Object',\n    stat: true,\n    forced: Object.assign !== objectAssign\n  }, {\n    assign: objectAssign\n  });\n\n  var FAILS_ON_PRIMITIVES = fails(function () {\n    objectKeys(1);\n  }); // `Object.keys` method\n  // https://tc39.github.io/ecma262/#sec-object.keys\n\n  _export({\n    target: 'Object',\n    stat: true,\n    forced: FAILS_ON_PRIMITIVES\n  }, {\n    keys: function keys(it) {\n      return objectKeys(toObject(it));\n    }\n  });\n\n  var deepObjectsMerge = function deepObjectsMerge(target, source) {\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n    for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], deepObjectsMerge(target[key], source[key]));\n      }\n    } // Join `target` and modified `source`\n\n\n    Object.assign(target || {}, source);\n    return target;\n  };\n\n  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {\n    // Chrome 38 Symbol has incorrect toString conversion\n    // eslint-disable-next-line no-undef\n    return !String(Symbol());\n  });\n  var Symbol$1 = global_1.Symbol;\n  var store$1 = shared('wks');\n\n  var wellKnownSymbol = function wellKnownSymbol(name) {\n    return store$1[name] || (store$1[name] = nativeSymbol && Symbol$1[name] || (nativeSymbol ? Symbol$1 : uid)('Symbol.' + name));\n  }; // `RegExp.prototype.flags` getter implementation\n  // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\n\n\n  var regexpFlags = function regexpFlags() {\n    var that = anObject(this);\n    var result = '';\n    if (that.global) result += 'g';\n    if (that.ignoreCase) result += 'i';\n    if (that.multiline) result += 'm';\n    if (that.unicode) result += 'u';\n    if (that.sticky) result += 'y';\n    return result;\n  };\n\n  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the\n  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n  // which loads this file before patching the method.\n\n  var nativeReplace = String.prototype.replace;\n  var patchedExec = nativeExec;\n\n  var UPDATES_LAST_INDEX_WRONG = function () {\n    var re1 = /a/;\n    var re2 = /b*/g;\n    nativeExec.call(re1, 'a');\n    nativeExec.call(re2, 'a');\n    return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.\n\n\n  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\n  if (PATCH) {\n    patchedExec = function exec(str) {\n      var re = this;\n      var lastIndex, reCopy, match, i;\n\n      if (NPCG_INCLUDED) {\n        reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n      }\n\n      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n      match = nativeExec.call(re, str);\n\n      if (UPDATES_LAST_INDEX_WRONG && match) {\n        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n      }\n\n      if (NPCG_INCLUDED && match && match.length > 1) {\n        // Fix browsers whose `exec` methods don't consistently return `undefined`\n        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n        nativeReplace.call(match[0], reCopy, function () {\n          for (i = 1; i < arguments.length - 2; i++) {\n            if (arguments[i] === undefined) match[i] = undefined;\n          }\n        });\n      }\n\n      return match;\n    };\n  }\n\n  var regexpExec = patchedExec;\n  var SPECIES = wellKnownSymbol('species');\n  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n    // #replace needs built-in support for named groups.\n    // #match works fine because it just return the exec results, even if it has\n    // a \"grops\" property.\n    var re = /./;\n\n    re.exec = function () {\n      var result = [];\n      result.groups = {\n        a: '7'\n      };\n      return result;\n    };\n\n    return ''.replace(re, '$<a>') !== '7';\n  }); // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  // Weex JS has frozen built-in prototypes, so use try / catch wrapper\n\n  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n    var re = /(?:)/;\n    var originalExec = re.exec;\n\n    re.exec = function () {\n      return originalExec.apply(this, arguments);\n    };\n\n    var result = 'ab'.split(re);\n    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n  });\n\n  var fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(KEY, length, exec, sham) {\n    var SYMBOL = wellKnownSymbol(KEY);\n    var DELEGATES_TO_SYMBOL = !fails(function () {\n      // String methods call symbol-named RegEp methods\n      var O = {};\n\n      O[SYMBOL] = function () {\n        return 7;\n      };\n\n      return ''[KEY](O) != 7;\n    });\n    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n      // Symbol-named RegExp methods call .exec\n      var execCalled = false;\n      var re = /a/;\n\n      re.exec = function () {\n        execCalled = true;\n        return null;\n      };\n\n      if (KEY === 'split') {\n        // RegExp[@@split] doesn't call the regex's exec method, but first creates\n        // a new one. We need to return the patched regex when creating the new one.\n        re.constructor = {};\n\n        re.constructor[SPECIES] = function () {\n          return re;\n        };\n      }\n\n      re[SYMBOL]('');\n      return !execCalled;\n    });\n\n    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n      var nativeRegExpMethod = /./[SYMBOL];\n      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return {\n              done: true,\n              value: nativeRegExpMethod.call(regexp, str, arg2)\n            };\n          }\n\n          return {\n            done: true,\n            value: nativeMethod.call(str, regexp, arg2)\n          };\n        }\n\n        return {\n          done: false\n        };\n      });\n      var stringMethod = methods[0];\n      var regexMethod = methods[1];\n      redefine(String.prototype, KEY, stringMethod);\n      redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) {\n        return regexMethod.call(string, this, arg);\n      } // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) {\n        return regexMethod.call(string, this);\n      });\n      if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);\n    }\n  }; // CONVERT_TO_STRING: true  -> String#at\n  // CONVERT_TO_STRING: false -> String#codePointAt\n\n\n  var stringAt = function stringAt(that, pos, CONVERT_TO_STRING) {\n    var S = String(requireObjectCoercible(that));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  }; // `AdvanceStringIndex` abstract operation\n  // https://tc39.github.io/ecma262/#sec-advancestringindex\n\n\n  var advanceStringIndex = function advanceStringIndex(S, index, unicode) {\n    return index + (unicode ? stringAt(S, index, true).length : 1);\n  }; // `RegExpExec` abstract operation\n  // https://tc39.github.io/ecma262/#sec-regexpexec\n\n\n  var regexpExecAbstract = function regexpExecAbstract(R, S) {\n    var exec = R.exec;\n\n    if (typeof exec === 'function') {\n      var result = exec.call(R, S);\n\n      if (typeof result !== 'object') {\n        throw TypeError('RegExp exec method returned something other than an Object or null');\n      }\n\n      return result;\n    }\n\n    if (classofRaw(R) !== 'RegExp') {\n      throw TypeError('RegExp#exec called on incompatible receiver');\n    }\n\n    return regexpExec.call(R, S);\n  }; // @@match logic\n\n\n  fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n    return [// `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    }, // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regexpExecAbstract(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n\n      while ((result = regexpExecAbstract(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n\n      return n === 0 ? null : A;\n    }];\n  });\n  var max$1 = Math.max;\n  var min$2 = Math.min;\n  var floor$1 = Math.floor;\n  var SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\n  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\n  var maybeToString = function maybeToString(it) {\n    return it === undefined ? it : String(it);\n  }; // @@replace logic\n\n\n  fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {\n    return [// `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);\n    }, // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n\n      var results = [];\n\n      while (true) {\n        var result = regexpExecAbstract(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max$1(min$2(toInteger(result.index), S.length), 0);\n        var captures = []; // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n\n        for (var j = 1; j < result.length; j++) {\n          captures.push(maybeToString(result[j]));\n        }\n\n        var namedCaptures = result.groups;\n\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution\n\n    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n      var tailPos = position + matched.length;\n      var m = captures.length;\n      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n\n      if (namedCaptures !== undefined) {\n        namedCaptures = toObject(namedCaptures);\n        symbols = SUBSTITUTION_SYMBOLS;\n      }\n\n      return nativeReplace.call(replacement, symbols, function (match, ch) {\n        var capture;\n\n        switch (ch.charAt(0)) {\n          case '$':\n            return '$';\n\n          case '&':\n            return matched;\n\n          case '`':\n            return str.slice(0, position);\n\n          case \"'\":\n            return str.slice(tailPos);\n\n          case '<':\n            capture = namedCaptures[ch.slice(1, -1)];\n            break;\n\n          default:\n            // \\d\\d?\n            var n = +ch;\n            if (n === 0) return match;\n\n            if (n > m) {\n              var f = floor$1(n / 10);\n              if (f === 0) return match;\n              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n              return match;\n            }\n\n            capture = captures[n - 1];\n        }\n\n        return capture === undefined ? '' : capture;\n      });\n    }\n  });\n  var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation\n  // https://tc39.github.io/ecma262/#sec-isregexp\n\n  var isRegexp = function isRegexp(it) {\n    var isRegExp;\n    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');\n  };\n\n  var aFunction = function aFunction(it) {\n    if (typeof it != 'function') {\n      throw TypeError(String(it) + ' is not a function');\n    }\n\n    return it;\n  };\n\n  var SPECIES$1 = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation\n  // https://tc39.github.io/ecma262/#sec-speciesconstructor\n\n  var speciesConstructor = function speciesConstructor(O, defaultConstructor) {\n    var C = anObject(O).constructor;\n    var S;\n    return C === undefined || (S = anObject(C)[SPECIES$1]) == undefined ? defaultConstructor : aFunction(S);\n  };\n\n  var arrayPush = [].push;\n  var min$3 = Math.min;\n  var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n\n  var SUPPORTS_Y = !fails(function () {\n    return !RegExp(MAX_UINT32, 'y');\n  }); // @@split logic\n\n  fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n    var internalSplit;\n\n    if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {\n      // based on es5-shim implementation, need to rework it\n      internalSplit = function internalSplit(separator, limit) {\n        var string = String(requireObjectCoercible(this));\n        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n        if (lim === 0) return [];\n        if (separator === undefined) return [string]; // If `separator` is not a regex, use native split\n\n        if (!isRegexp(separator)) {\n          return nativeSplit.call(string, separator, lim);\n        }\n\n        var output = [];\n        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');\n        var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy\n\n        var separatorCopy = new RegExp(separator.source, flags + 'g');\n        var match, lastIndex, lastLength;\n\n        while (match = regexpExec.call(separatorCopy, string)) {\n          lastIndex = separatorCopy.lastIndex;\n\n          if (lastIndex > lastLastIndex) {\n            output.push(string.slice(lastLastIndex, match.index));\n            if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n            lastLength = match[0].length;\n            lastLastIndex = lastIndex;\n            if (output.length >= lim) break;\n          }\n\n          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n        }\n\n        if (lastLastIndex === string.length) {\n          if (lastLength || !separatorCopy.test('')) output.push('');\n        } else output.push(string.slice(lastLastIndex));\n\n        return output.length > lim ? output.slice(0, lim) : output;\n      }; // Chakra, V8\n\n    } else if ('0'.split(undefined, 0).length) {\n      internalSplit = function internalSplit(separator, limit) {\n        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n      };\n    } else internalSplit = nativeSplit;\n\n    return [// `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);\n    }, // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n\n        if (z === null || (e = min$3(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n\n          q = p = e;\n        }\n      }\n\n      A.push(S.slice(p));\n      return A;\n    }];\n  }, !SUPPORTS_Y); // a string of all valid unicode whitespaces\n  // eslint-disable-next-line max-len\n\n  var whitespaces = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\";\n  var whitespace = '[' + whitespaces + ']';\n  var ltrim = RegExp('^' + whitespace + whitespace + '*');\n  var rtrim = RegExp(whitespace + whitespace + '*$'); // 1 -> String#trimStart\n  // 2 -> String#trimEnd\n  // 3 -> String#trim\n\n  var stringTrim = function stringTrim(string, TYPE) {\n    string = String(requireObjectCoercible(string));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n\n  var non = \"\\u200B\\x85\\u180E\"; // check that a method works with the correct list\n  // of whitespaces and has a correct name\n\n  var forcedStringTrimMethod = function forcedStringTrimMethod(METHOD_NAME) {\n    return fails(function () {\n      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n    });\n  };\n\n  var FORCED = forcedStringTrimMethod('trim'); // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n\n  _export({\n    target: 'String',\n    proto: true,\n    forced: FORCED\n  }, {\n    trim: function trim() {\n      return stringTrim(this, 3);\n    }\n  }); // iterable DOM collections\n  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\n\n\n  var domIterables = {\n    CSSRuleList: 0,\n    CSSStyleDeclaration: 0,\n    CSSValueList: 0,\n    ClientRectList: 0,\n    DOMRectList: 0,\n    DOMStringList: 0,\n    DOMTokenList: 1,\n    DataTransferItemList: 0,\n    FileList: 0,\n    HTMLAllCollection: 0,\n    HTMLCollection: 0,\n    HTMLFormElement: 0,\n    HTMLSelectElement: 0,\n    MediaList: 0,\n    MimeTypeArray: 0,\n    NamedNodeMap: 0,\n    NodeList: 1,\n    PaintRequestList: 0,\n    Plugin: 0,\n    PluginArray: 0,\n    SVGLengthList: 0,\n    SVGNumberList: 0,\n    SVGPathSegList: 0,\n    SVGPointList: 0,\n    SVGStringList: 0,\n    SVGTransformList: 0,\n    SourceBufferList: 0,\n    StyleSheetList: 0,\n    TextTrackCueList: 0,\n    TextTrackList: 0,\n    TouchList: 0\n  }; // optional / simple context binding\n\n  var bindContext = function bindContext(fn, that, length) {\n    aFunction(fn);\n    if (that === undefined) return fn;\n\n    switch (length) {\n      case 0:\n        return function () {\n          return fn.call(that);\n        };\n\n      case 1:\n        return function (a) {\n          return fn.call(that, a);\n        };\n\n      case 2:\n        return function (a, b) {\n          return fn.call(that, a, b);\n        };\n\n      case 3:\n        return function (a, b, c) {\n          return fn.call(that, a, b, c);\n        };\n    }\n\n    return function ()\n    /* ...args */\n    {\n      return fn.apply(that, arguments);\n    };\n  }; // `IsArray` abstract operation\n  // https://tc39.github.io/ecma262/#sec-isarray\n\n\n  var isArray = Array.isArray || function isArray(arg) {\n    return classofRaw(arg) == 'Array';\n  };\n\n  var SPECIES$2 = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation\n  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate\n\n  var arraySpeciesCreate = function arraySpeciesCreate(originalArray, length) {\n    var C;\n\n    if (isArray(originalArray)) {\n      C = originalArray.constructor; // cross-realm fallback\n\n      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {\n        C = C[SPECIES$2];\n        if (C === null) C = undefined;\n      }\n    }\n\n    return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n  }; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\n  // 0 -> Array#forEach\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  // 1 -> Array#map\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  // 2 -> Array#filter\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  // 3 -> Array#some\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  // 4 -> Array#every\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  // 5 -> Array#find\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  // 6 -> Array#findIndex\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n\n\n  var arrayMethods = function arrayMethods(TYPE, specificCreate) {\n    var IS_MAP = TYPE == 1;\n    var IS_FILTER = TYPE == 2;\n    var IS_SOME = TYPE == 3;\n    var IS_EVERY = TYPE == 4;\n    var IS_FIND_INDEX = TYPE == 6;\n    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n    var create = specificCreate || arraySpeciesCreate;\n    return function ($this, callbackfn, that) {\n      var O = toObject($this);\n      var self = indexedObject(O);\n      var boundFunction = bindContext(callbackfn, that, 3);\n      var length = toLength(self.length);\n      var index = 0;\n      var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n      var value, result;\n\n      for (; length > index; index++) {\n        if (NO_HOLES || index in self) {\n          value = self[index];\n          result = boundFunction(value, index, O);\n\n          if (TYPE) {\n            if (IS_MAP) target[index] = result; // map\n            else if (result) switch (TYPE) {\n                case 3:\n                  return true;\n                // some\n\n                case 5:\n                  return value;\n                // find\n\n                case 6:\n                  return index;\n                // findIndex\n\n                case 2:\n                  target.push(value);\n                // filter\n              } else if (IS_EVERY) return false; // every\n          }\n        }\n      }\n\n      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n    };\n  };\n\n  var sloppyArrayMethod = function sloppyArrayMethod(METHOD_NAME, argument) {\n    var method = [][METHOD_NAME];\n    return !method || !fails(function () {\n      // eslint-disable-next-line no-useless-call,no-throw-literal\n      method.call(null, argument || function () {\n        throw 1;\n      }, 1);\n    });\n  };\n\n  var internalForEach = arrayMethods(0);\n  var SLOPPY_METHOD = sloppyArrayMethod('forEach'); // `Array.prototype.forEach` method implementation\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n\n  var arrayForEach = SLOPPY_METHOD ? function forEach(callbackfn\n  /* , thisArg */\n  ) {\n    return internalForEach(this, callbackfn, arguments[1]);\n  } : [].forEach;\n\n  for (var COLLECTION_NAME in domIterables) {\n    var Collection = global_1[COLLECTION_NAME];\n    var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList\n\n    if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {\n      hide(CollectionPrototype, 'forEach', arrayForEach);\n    } catch (error) {\n      CollectionPrototype.forEach = arrayForEach;\n    }\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.12): get-css-custom-properties.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * @returns {string} css custom property name\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var getCssCustomProperties = function getCssCustomProperties() {\n    var cssCustomProperties = {};\n    var sheets = document.styleSheets;\n    var cssText = '';\n\n    for (var i = sheets.length - 1; i > -1; i--) {\n      var rules = sheets[i].cssRules;\n\n      for (var j = rules.length - 1; j > -1; j--) {\n        if (rules[j].selectorText === '.ie-custom-properties') {\n          cssText = rules[j].cssText;\n          break;\n        }\n      }\n\n      if (cssText) {\n        break;\n      }\n    }\n\n    cssText = cssText.substring(cssText.lastIndexOf('{') + 1, cssText.lastIndexOf('}'));\n    cssText.split(';').forEach(function (property) {\n      if (property) {\n        var name = property.split(': ')[0];\n        var value = property.split(': ')[1];\n\n        if (name && value) {\n          cssCustomProperties[\"--\" + name.trim()] = value.trim();\n        }\n      }\n    });\n    return cssCustomProperties;\n  };\n\n  var minIEVersion = 10;\n\n  var isIE1x = function isIE1x() {\n    return Boolean(document.documentMode) && document.documentMode >= minIEVersion;\n  };\n\n  var isCustomProperty = function isCustomProperty(property) {\n    return property.match(/^--.*/i);\n  };\n\n  var getStyle = function getStyle(property, element) {\n    if (element === void 0) {\n      element = document.body;\n    }\n\n    var style;\n\n    if (isCustomProperty(property) && isIE1x()) {\n      var cssCustomProperties = getCssCustomProperties();\n      style = cssCustomProperties[property];\n    } else {\n      style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '');\n    }\n\n    return style;\n  };\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.12): get-color.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var getColor = function getColor(rawProperty, element) {\n    if (element === void 0) {\n      element = document.body;\n    }\n\n    var property = \"--\" + rawProperty;\n    var style = getStyle(property, element);\n    return style ? style : rawProperty;\n  };\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.12): hex-to-rgb.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /* eslint-disable no-magic-numbers */\n\n\n  var hexToRgb = function hexToRgb(color) {\n    if (typeof color === 'undefined') {\n      throw new Error('Hex color is not defined');\n    }\n\n    var hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i);\n\n    if (!hex) {\n      throw new Error(color + \" is not a valid hex color\");\n    }\n\n    var r;\n    var g;\n    var b;\n\n    if (color.length === 7) {\n      r = parseInt(color.substring(1, 3), 16);\n      g = parseInt(color.substring(3, 5), 16);\n      b = parseInt(color.substring(5, 7), 16);\n    } else {\n      r = parseInt(color.substring(1, 2), 16);\n      g = parseInt(color.substring(2, 3), 16);\n      b = parseInt(color.substring(3, 5), 16);\n    }\n\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \")\";\n  };\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.12): hex-to-rgba.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /* eslint-disable no-magic-numbers */\n\n\n  var hexToRgba = function hexToRgba(color, opacity) {\n    if (opacity === void 0) {\n      opacity = 100;\n    }\n\n    if (typeof color === 'undefined') {\n      throw new Error('Hex color is not defined');\n    }\n\n    var hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i);\n\n    if (!hex) {\n      throw new Error(color + \" is not a valid hex color\");\n    }\n\n    var r;\n    var g;\n    var b;\n\n    if (color.length === 7) {\n      r = parseInt(color.substring(1, 3), 16);\n      g = parseInt(color.substring(3, 5), 16);\n      b = parseInt(color.substring(5, 7), 16);\n    } else {\n      r = parseInt(color.substring(1, 2), 16);\n      g = parseInt(color.substring(2, 3), 16);\n      b = parseInt(color.substring(3, 5), 16);\n    }\n\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + opacity / 100 + \")\";\n  };\n\n  var createProperty = function createProperty(object, key, value) {\n    var propertyKey = toPrimitive(key);\n    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;\n  };\n\n  var SPECIES$3 = wellKnownSymbol('species');\n\n  var arrayMethodHasSpeciesSupport = function arrayMethodHasSpeciesSupport(METHOD_NAME) {\n    return !fails(function () {\n      var array = [];\n      var constructor = array.constructor = {};\n\n      constructor[SPECIES$3] = function () {\n        return {\n          foo: 1\n        };\n      };\n\n      return array[METHOD_NAME](Boolean).foo !== 1;\n    });\n  };\n\n  var SPECIES$4 = wellKnownSymbol('species');\n  var nativeSlice = [].slice;\n  var max$2 = Math.max;\n  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice'); // `Array.prototype.slice` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.slice\n  // fallback for not array-like ES3 strings and DOM objects\n\n  _export({\n    target: 'Array',\n    proto: true,\n    forced: !SPECIES_SUPPORT\n  }, {\n    slice: function slice(start, end) {\n      var O = toIndexedObject(this);\n      var length = toLength(O.length);\n      var k = toAbsoluteIndex(start, length);\n      var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n\n      var Constructor, result, n;\n\n      if (isArray(O)) {\n        Constructor = O.constructor; // cross-realm fallback\n\n        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n          Constructor = undefined;\n        } else if (isObject(Constructor)) {\n          Constructor = Constructor[SPECIES$4];\n          if (Constructor === null) Constructor = undefined;\n        }\n\n        if (Constructor === Array || Constructor === undefined) {\n          return nativeSlice.call(O, k, fin);\n        }\n      }\n\n      result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));\n\n      for (n = 0; k < fin; k++, n++) {\n        if (k in O) createProperty(result, n, O[k]);\n      }\n\n      result.length = n;\n      return result;\n    }\n  });\n\n  var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here\n\n  var CORRECT_ARGUMENTS = classofRaw(function () {\n    return arguments;\n  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error\n\n  var tryGet = function tryGet(it, key) {\n    try {\n      return it[key];\n    } catch (error) {\n      /* empty */\n    }\n  }; // getting tag from ES6+ `Object.prototype.toString`\n\n\n  var classof = function classof(it) {\n    var O, tag, result;\n    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n  };\n\n  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');\n  var test = {};\n  test[TO_STRING_TAG$1] = 'z'; // `Object.prototype.toString` method implementation\n  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n\n  var objectToString = String(test) !== '[object z]' ? function toString() {\n    return '[object ' + classof(this) + ']';\n  } : test.toString;\n  var ObjectPrototype = Object.prototype; // `Object.prototype.toString` method\n  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n\n  if (objectToString !== ObjectPrototype.toString) {\n    redefine(ObjectPrototype, 'toString', objectToString, {\n      unsafe: true\n    });\n  }\n\n  var TO_STRING = 'toString';\n  var nativeToString = /./[TO_STRING];\n  var RegExpPrototype = RegExp.prototype;\n  var NOT_GENERIC = fails(function () {\n    return nativeToString.call({\n      source: 'a',\n      flags: 'b'\n    }) != '/a/b';\n  }); // FF44- RegExp#toString has a wrong name\n\n  var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method\n  // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\n\n  if (NOT_GENERIC || INCORRECT_NAME) {\n    redefine(RegExp.prototype, TO_STRING, function toString() {\n      var R = anObject(this);\n      var p = String(R.source);\n      var rf = R.flags;\n      var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);\n      return '/' + p + '/' + f;\n    }, {\n      unsafe: true\n    });\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI (v2.1.12): rgb-to-hex.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /* eslint-disable no-magic-numbers */\n\n\n  var rgbToHex = function rgbToHex(color) {\n    if (typeof color === 'undefined') {\n      throw new Error('Hex color is not defined');\n    }\n\n    if (color === 'transparent') {\n      return '#00000000';\n    }\n\n    var rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n\n    if (!rgb) {\n      throw new Error(color + \" is not a valid rgb color\");\n    }\n\n    var r = \"0\" + parseInt(rgb[1], 10).toString(16);\n    var g = \"0\" + parseInt(rgb[2], 10).toString(16);\n    var b = \"0\" + parseInt(rgb[3], 10).toString(16);\n    return \"#\" + r.slice(-2) + g.slice(-2) + b.slice(-2);\n  };\n\n  exports.asideMenuCssClasses = asideMenuCssClasses;\n  exports.checkBreakpoint = checkBreakpoint;\n  exports.deepObjectsMerge = deepObjectsMerge;\n  exports.getColor = getColor;\n  exports.getStyle = getStyle;\n  exports.hexToRgb = hexToRgb;\n  exports.hexToRgba = hexToRgba;\n  exports.rgbToHex = rgbToHex;\n  exports.sidebarCssClasses = sidebarCssClasses;\n  exports.validBreakpoints = validBreakpoints;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}