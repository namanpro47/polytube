{"ast":null,"code":"'use strict';\n\nvar anObject = require('../internals/an-object');\n\nvar aFunction = require('../internals/a-function');\n\nvar getSetIterator = require('../internals/get-set-iterator'); // `Set.prototype.reduce` method\n// https://github.com/tc39/proposal-collection-methods\n\n\nrequire('../internals/export')({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: require('../internals/is-pure')\n}, {\n  reduce: function reduce(callbackfn\n  /* , initialValue */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var accumulator, step, value;\n    aFunction(callbackfn);\n    if (arguments.length > 1) accumulator = arguments[1];else {\n      step = iterator.next();\n      if (step.done) throw TypeError('Reduce of empty set with no initial value');\n      accumulator = step.value;\n    }\n\n    while (!(step = iterator.next()).done) {\n      accumulator = callbackfn(accumulator, value = step.value, value, set);\n    }\n\n    return accumulator;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}